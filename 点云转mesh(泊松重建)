#pragma warning(disable:4996)
#include<iostream>
#include<opencv2/opencv.hpp>
#include <pcl/io/io.h>
#include<pcl/io/ply_io.h>
#include<pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/passthrough.h>
#include <pcl/surface/poisson.h>
#include <pcl/features/normal_3d_omp.h>
#include <omp.h>



using namespace std;
using namespace cv;
using namespace pcl;

string RGB_img_path =  "rgb.jpg";
string depth_img_path =  "depth.png";

//定义相机内参
double cx = 650.7; 
double cy = 352.941;
double fx = 916.28;
double fy = 916.088;
double depthScale = 1000.0;



void poisson_reconstruction(String meshfile_name,pcl::PointCloud<pcl::PointXYZRGB> object_cloud)
{
	PointCloud<PointXYZRGB>::Ptr cloud(new PointCloud<PointXYZRGB>());
	pcl::copyPointCloud(object_cloud, *cloud);


	//直通滤波器滤波，去除噪声
	cout << "begin passthrough filter" << endl;
	PointCloud<PointXYZRGB>::Ptr filtered(new PointCloud<PointXYZRGB>());
	PassThrough<PointXYZRGB> filter;
	filter.setInputCloud(cloud);
	filter.filter(*filtered);
	cout << "passthrough filter complete" << endl;


	//计算点云法向量
	cout << "begin normal estimation" << endl;
	NormalEstimationOMP<PointXYZRGB, Normal> ne;//计算点云法向
	ne.setNumberOfThreads(8);//设定同时工作的线程数
	ne.setInputCloud(filtered);//设置输入点云
	ne.setRadiusSearch(0.01);//设定搜索半径
	Eigen::Vector4f centroid;
	compute3DCentroid(*filtered, centroid);//计算点云中心
	ne.setViewPoint(centroid[0], centroid[1], centroid[2]);//将向量计算原点置于点云中心
	PointCloud<Normal>::Ptr cloud_normals(new PointCloud<Normal>());
	ne.compute(*cloud_normals);
	cout << "normal estimation complete" << endl;
	

	//将法向量反向
	cout << "begin reverse normals' direction" << endl;
	for (size_t i = 0; i < cloud_normals->size(); ++i)
	{
		cloud_normals->points[i].normal_x *= -1;
		cloud_normals->points[i].normal_y *= -1;
		cloud_normals->points[i].normal_z *= -1;
	}
	cout << "reverse normals' direction complete" << endl;


	//融合PointXYZRGB点云和法向量，生成PointXYZRGBNormal点云
	cout << "begin combine points and normals" << endl;
	PointCloud<PointXYZRGBNormal>::Ptr cloud_smoothed_normals(new PointCloud<PointXYZRGBNormal>());
	concatenateFields(*filtered, *cloud_normals, *cloud_smoothed_normals);
	cout << "combine points and normals complete" << endl;


	//泊松重建
	cout << "begin poisson reconstruction" << endl;
	Poisson<PointXYZRGBNormal> poisson;
	//poisson.setDegree(2);
	poisson.setDepth(8);
	poisson.setSolverDivide(6);
	poisson.setIsoDivide(6);
	poisson.setConfidence(false);
	poisson.setManifold(false);
	poisson.setOutputPolygons(false);
	poisson.setInputCloud(cloud_smoothed_normals);
	PolygonMesh mesh;
	poisson.reconstruct(mesh);
	cout << "finish poisson reconstruction" << endl;


	//给mesh染色
	PointCloud<PointXYZRGB> cloud_color_mesh;
	pcl::fromPCLPointCloud2(mesh.cloud, cloud_color_mesh);//将mesh信息转换为点云
	pcl::KdTreeFLANN<pcl::PointXYZRGB> kdtree;//建立KD Tree
	kdtree.setInputCloud(cloud);//KD Tree输入点云为原点云
	//K最近邻搜索
	int K = 5;
	std::vector<int> pointIdxNKNSearch(K);//存储查询点近邻索引
	std::vector<float> pointNKNSquaredDistance(K);//存储近邻点对应距离平方
	for (int i = 0; i < cloud_color_mesh.points.size(); ++i)
	{
		uint8_t r = 0;
		uint8_t g = 0;
		uint8_t b = 0;
		//float dist = 0.0;
		int red = 0;
		int green = 0;
		int blue = 0;
		uint32_t rgb;

		if (kdtree.nearestKSearch(cloud_color_mesh.points[i], K, pointIdxNKNSearch, pointNKNSquaredDistance) > 0)//函数kdtree.nearestKSearch返回K值
		{
			for (int j = 0; j < pointIdxNKNSearch.size(); ++j)
			{

				r = cloud->points[pointIdxNKNSearch[j]].r;
				g = cloud->points[pointIdxNKNSearch[j]].g;
				b = cloud->points[pointIdxNKNSearch[j]].b;
				//求这K个点的red green blue的和，以及距离平方倒数之和
				red += int(r);
				green += int(g);
				blue += int(b);
				//dist += 1.0 / pointNKNSquaredDistance[j];
			}
		}
		//取KNN点颜色的均值作为mesh上的点的颜色
		cloud_color_mesh.points[i].r = int(red / pointIdxNKNSearch.size() + 0.5);
		cloud_color_mesh.points[i].g = int(green / pointIdxNKNSearch.size() + 0.5);
		cloud_color_mesh.points[i].b = int(blue / pointIdxNKNSearch.size() + 0.5);
	}
	toPCLPointCloud2(cloud_color_mesh, mesh.cloud);//将点云信息转进mesh网格中
	io::savePLYFile(meshfile_name, mesh);//存储mesh格式
}




int main()
{
  Mat RGB_img = imread(RGB_img_path);
  Mat depth_image = imread(depth_img_path,-1);// 使用-1读取原始图像
  pcl::PointCloud<pcl::PointXYZRGB> point_cloud;
  for (int v = 0; v < RGB_img.rows; v++)
  {
	for (int u = 0; u < RGB_img.cols; u++)
    {
      unsigned int d = depth_image.ptr<unsigned short>(v)[u];
	  //cout << d << endl;
      if(d==0)continue;
      pcl::PointXYZRGB point;
      point.z = double(d) / depthScale;
      point.x = (u-cx) * point.z / fx;
      point.y = (v-cy) * point.z / fy;
	  point.r = RGB_img.data[v * RGB_img.step[0] + u * RGB_img.channels()];
	  point.g = RGB_img.data[v * RGB_img.step[0] + u * RGB_img.channels() + 1];
	  point.b = RGB_img.data[v * RGB_img.step[0] + u * RGB_img.channels() + 2];
      point_cloud.points.push_back(point);
    }
  }
  point_cloud.width = point_cloud.points.size();
  point_cloud.height = 1;
  pcl::io::savePLYFile("point_cloud.ply", point_cloud);
  pcl::io::savePCDFile("point_cloud.pcd", point_cloud);
  //泊松重建
  poisson_reconstruction("object_mesh.ply",point_cloud);
}
